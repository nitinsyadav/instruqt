slug: developing-with-quarkus-monitoring
id: husayvyvw0ax
title: Monitoring Quarkus with Micrometer
description: |-
  |What you need to know before you start|
  |----|
  |In order to get full benefit from taking this track you should...<br>• Be comfortable working at the command line in a terminal window.<br>• Have a working knowledge of the [Spring](https://spring.io/) framework for Java.<br>• Have a general understanding about the purpose and use of [OpenShift](https://www.redhat.com/en/technologies/cloud-computing/openshift/container-platform) as a management framework for Linux containers.<br>• Have a general understanding about using a [Java resource class](https://access.redhat.com/documentation/en-us/red_hat_jboss_fuse/6.0/html/developing_restful_web_services/restintro) to create RESTful endpoints to get and send data to and from a RESTful application. <br>• Have an introductory understanding of how to use Quarkus to create applications that run on Red Hat OpenShift.<br>• Have a general understanding of the purpose and use of [Prometheus](https://prometheus.io/docs/introduction/overview/) and [Grafana](https://grafana.com/) monitoring and reporting tools. Having an understanding of [counters](https://prometheus.io/docs/concepts/metric_types/#counter) and [gauges](https://prometheus.io/docs/concepts/metric_types/#gauge) under Prometheus is particularly useful.|

  ----

  This track demonstrates how a Quarkus application utilizes the [Micrometer Metrics](https://quarkus.io/guides/micrometer) extension to produce and observe metrics generated by the application.

  # What is Micrometer?

  [Micrometer](https://micrometer.io/) enables applications to gather various metrics and statistics that provide insights into what is happening inside the application. This information helps pinpoint issues, provide long term trend data for capacity planning and pro-active discovery of issues. For example, Micrometer can report when disk usage grows without bounds. Such metrics can also help those scheduling systems decide when to scale a particular application to run on more or fewer machines.

  Micrometer defines a core library and a set of additional libraries that support different monitoring systems.

  Quarkus Micrometer extensions are structured similarly. `quarkus-micrometer` provides core micrometer support and runtime integration. In addition, other supporting Quarkus and [Quarkiverse](https://quarkus.io/blog/quarkiverse/) extensions include additional dependencies and requirements to support specific monitoring systems.

  # Learn more

  Learn more at [quarkus.io](https://quarkus.io), or just drive on and get hands-on!
icon: https://logodix.com/logo/1910931.png
level: intermediate
tags:
- prod
- openshift
owner: openshift
developers:
- doh@redhat.com
- bob@cogarttech.com
- null
- cclyburn@redhat.com
- ryanj@redhat.com
lab_config:
  overlay: false
  width: 33
  position: right
  feedback_recap_enabled: true
  loadingMessages: true
checksum: "16105822991485627045"
